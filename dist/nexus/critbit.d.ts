import * as $ from "@manahippo/move-to-ts";
import { AptosDataCache, AptosParserRepo, AptosLocalCache } from "@manahippo/move-to-ts";
import { U8, U64, U128 } from "@manahippo/move-to-ts";
import { TypeParamDeclType, FieldDeclType } from "@manahippo/move-to-ts";
import { StructTag, TypeTag } from "@manahippo/move-to-ts";
import { HexString, AptosClient } from "aptos";
export declare const packageName = "nexus";
export declare const moduleAddress: HexString;
export declare const moduleName = "critbit";
export declare const E_BIT_NOT_0_OR_1: U64;
export declare const E_BORROW_EMPTY: U64;
export declare const E_DESTROY_NOT_EMPTY: U64;
export declare const E_HAS_KEY: U64;
export declare const E_INSERT_FULL: U64;
export declare const E_LOOKUP_EMPTY: U64;
export declare const E_NOT_HAS_KEY: U64;
export declare const E_POP_EMPTY: U64;
export declare const HI_128: U128;
export declare const HI_64: U64;
export declare const INNER: U64;
export declare const LEFT: boolean;
export declare const MSB_u128: U8;
export declare const NODE_TYPE: U8;
export declare const OUTER: U64;
export declare const RIGHT: boolean;
export declare const ROOT: U64;
export declare class CritBitTree {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    root: U64;
    inner_nodes: InnerNode[];
    outer_nodes: OuterNode[];
    constructor(proto: any, typeTag: TypeTag);
    static CritBitTreeParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): CritBitTree;
    static makeTag($p: TypeTag[]): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class InnerNode {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    critical_bit: U8;
    parent_index: U64;
    left_child_index: U64;
    right_child_index: U64;
    constructor(proto: any, typeTag: TypeTag);
    static InnerNodeParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): InnerNode;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class OuterNode {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    key: U128;
    value: any;
    parent_index: U64;
    constructor(proto: any, typeTag: TypeTag);
    static OuterNodeParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): OuterNode;
    static makeTag($p: TypeTag[]): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare function borrow_(tree: CritBitTree, key: U128, $c: AptosDataCache, $p: TypeTag[]): Promise<any>;
export declare function borrow_closest_outer_node_(tree: CritBitTree, key: U128, $c: AptosDataCache, $p: TypeTag[]): Promise<OuterNode>;
export declare function borrow_closest_outer_node_mut_(tree: CritBitTree, key: U128, $c: AptosDataCache, $p: TypeTag[]): Promise<OuterNode>;
export declare function borrow_mut_(tree: CritBitTree, key: U128, $c: AptosDataCache, $p: TypeTag[]): Promise<any>;
export declare function check_length_(length: U64, $c: AptosDataCache): Promise<void>;
export declare function crit_bit_(s1: U128, s2: U128, $c: AptosDataCache): Promise<U8>;
export declare function destroy_empty_(tree: CritBitTree, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function empty_($c: AptosDataCache, $p: TypeTag[]): Promise<CritBitTree>;
export declare function has_key_(tree: CritBitTree, key: U128, $c: AptosDataCache, $p: TypeTag[]): Promise<boolean>;
export declare function insert_(tree: CritBitTree, key: U128, value: any, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function insert_above_(tree: CritBitTree, key: U128, value: any, n_outer_nodes: U64, n_inner_nodes: U64, search_parent_index: U64, critical_bit: U8, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function insert_above_root_(tree: CritBitTree, key: U128, value: any, n_outer_nodes: U64, n_inner_nodes: U64, critical_bit: U8, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function insert_below_(tree: CritBitTree, key: U128, value: any, n_outer_nodes: U64, n_inner_nodes: U64, search_index: U64, search_child_side: boolean, search_key: U128, search_parent_index: U64, critical_bit: U8, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function insert_below_walk_(tree: CritBitTree, key: U128, value: any, n_outer_nodes: U64, n_inner_nodes: U64, review_node_index: U64, critical_bit: U8, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function insert_empty_(tree: CritBitTree, key: U128, value: any, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function insert_general_(tree: CritBitTree, key: U128, value: any, n_outer_nodes: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function insert_singleton_(tree: CritBitTree, key: U128, value: any, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function is_empty_(tree: CritBitTree, $c: AptosDataCache, $p: TypeTag[]): Promise<boolean>;
export declare function is_outer_node_(child_field_index: U64, $c: AptosDataCache): Promise<boolean>;
export declare function is_set_(key: U128, bit_number: U8, $c: AptosDataCache): Promise<boolean>;
export declare function length_(tree: CritBitTree, $c: AptosDataCache, $p: TypeTag[]): Promise<U64>;
export declare function max_key_(tree: CritBitTree, $c: AptosDataCache, $p: TypeTag[]): Promise<U128>;
export declare function max_node_child_index_(tree: CritBitTree, $c: AptosDataCache, $p: TypeTag[]): Promise<U64>;
export declare function min_key_(tree: CritBitTree, $c: AptosDataCache, $p: TypeTag[]): Promise<U128>;
export declare function min_node_child_index_(tree: CritBitTree, $c: AptosDataCache, $p: TypeTag[]): Promise<U64>;
export declare function outer_node_child_index_(vector_index: U64, $c: AptosDataCache): Promise<U64>;
export declare function outer_node_vector_index_(child_field_index: U64, $c: AptosDataCache): Promise<U64>;
export declare function pop_(tree: CritBitTree, key: U128, $c: AptosDataCache, $p: TypeTag[]): Promise<any>;
export declare function pop_destroy_nodes_(tree: CritBitTree, inner_index: U64, outer_index: U64, n_outer_nodes: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<any>;
export declare function pop_general_(tree: CritBitTree, key: U128, n_outer_nodes: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<any>;
export declare function pop_singleton_(tree: CritBitTree, key: U128, $c: AptosDataCache, $p: TypeTag[]): Promise<any>;
export declare function pop_update_relationships_(tree: CritBitTree, child_side: boolean, parent_index: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function push_back_insert_nodes_(tree: CritBitTree, key: U128, value: any, inner_index: U64, critical_bit: U8, parent_index: U64, child_polarity: boolean, child_index_1: U64, child_index_2: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function search_outer_(tree: CritBitTree, key: U128, $c: AptosDataCache, $p: TypeTag[]): Promise<[U64, boolean, U128, U64, U8]>;
export declare function singleton_(key: U128, value: any, $c: AptosDataCache, $p: TypeTag[]): Promise<CritBitTree>;
export declare function stitch_child_of_parent_(tree: CritBitTree, new_index: U64, parent_index: U64, old_index: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function stitch_parent_of_child_(tree: CritBitTree, new_index: U64, child_index: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function stitch_swap_remove_(tree: CritBitTree, node_index: U64, n_nodes: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function traverse_end_pop_(tree: CritBitTree, parent_index: U64, child_index: U64, n_outer_nodes: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<any>;
export declare function traverse_init_mut_(tree: CritBitTree, direction: boolean, $c: AptosDataCache, $p: TypeTag[]): Promise<[U128, any, U64, U64]>;
export declare function traverse_mut_(tree: CritBitTree, key: U128, parent_index: U64, direction: boolean, $c: AptosDataCache, $p: TypeTag[]): Promise<[U128, any, U64, U64]>;
export declare function traverse_pop_mut_(tree: CritBitTree, key: U128, parent_index: U64, child_index: U64, n_outer_nodes: U64, direction: boolean, $c: AptosDataCache, $p: TypeTag[]): Promise<[U128, any, U64, U64, any]>;
export declare function traverse_predecessor_init_mut_(tree: CritBitTree, $c: AptosDataCache, $p: TypeTag[]): Promise<[U128, any, U64, U64]>;
export declare function traverse_predecessor_mut_(tree: CritBitTree, key: U128, parent_index: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<[U128, any, U64, U64]>;
export declare function traverse_predecessor_pop_mut_(tree: CritBitTree, key: U128, parent_index: U64, child_index: U64, n_outer_nodes: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<[U128, any, U64, U64, any]>;
export declare function traverse_successor_init_mut_(tree: CritBitTree, $c: AptosDataCache, $p: TypeTag[]): Promise<[U128, any, U64, U64]>;
export declare function traverse_successor_mut_(tree: CritBitTree, key: U128, parent_index: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<[U128, any, U64, U64]>;
export declare function traverse_successor_pop_mut_(tree: CritBitTree, key: U128, parent_index: U64, child_index: U64, n_outer_nodes: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<[U128, any, U64, U64, any]>;
export declare function traverse_target_child_index_(tree: CritBitTree, key: U128, parent_index: U64, direction: boolean, $c: AptosDataCache, $p: TypeTag[]): Promise<U64>;
export declare function loadParsers(repo: AptosParserRepo): void;
export declare class App {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
    constructor(client: AptosClient, repo: AptosParserRepo, cache: AptosLocalCache);
    get moduleAddress(): HexString;
    get moduleName(): string;
    get CritBitTree(): typeof CritBitTree;
    get InnerNode(): typeof InnerNode;
    get OuterNode(): typeof OuterNode;
}
//# sourceMappingURL=critbit.d.ts.map