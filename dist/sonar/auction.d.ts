import * as $ from "@manahippo/move-to-ts";
import { AptosDataCache, AptosParserRepo, AptosLocalCache } from "@manahippo/move-to-ts";
import { U64 } from "@manahippo/move-to-ts";
import { TypeParamDeclType, FieldDeclType } from "@manahippo/move-to-ts";
import { StructTag, TypeTag } from "@manahippo/move-to-ts";
import { OptionTransaction } from "@manahippo/move-to-ts";
import { HexString, AptosClient, AptosAccount, TxnBuilderTypes, Types } from "aptos";
import * as Aptos_token from "../aptos_token";
import * as Stdlib from "../stdlib";
import * as Auction_bid_utils from "./auction_bid_utils";
import * as Auction_listing_utils from "./auction_listing_utils";
export declare const packageName = "Sonar";
export declare const moduleAddress: HexString;
export declare const moduleName = "auction";
export declare const EAUCION_HAS_ZERO_BIDS: U64;
export declare const EAUCTION_ENDED: U64;
export declare const EAUCTION_HIGHEST_BID_ZERO: U64;
export declare const EAUCTION_NOT_ENDED: U64;
export declare const EAUCTION_NOT_EXIST: U64;
export declare const EBID_INCREASE_TOO_SMALL: U64;
export declare const EBID_MIN_INCREMENTAL_IS_ZERO: U64;
export declare const EBID_NOT_FOUND_FOR_AUCTION: U64;
export declare const EBID_NOT_MATCH_ID_IN_AUCTION: U64;
export declare const EBID_WITH_SAME_PRICE_EXISTS: U64;
export declare const EINVALID_EXPIRATION_TIME: U64;
export declare const EINVALID_START_TIME: U64;
export declare const EONLY_AUCTION_HOUSE_OWNER_CAN_PERFORM_THIS_OPERATION: U64;
export declare class Auction {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    listing: Auction_listing_utils.Listing;
    bids: Stdlib.Simple_map.SimpleMap;
    offer_numbers: U64[];
    constructor(proto: any, typeTag: TypeTag);
    static AuctionParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Auction;
    static makeTag($p: TypeTag[]): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class AuctionHouseConfig {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    market_fee_numerator: U64;
    market_fee_denominator: U64;
    fee_address: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static AuctionHouseConfigParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): AuctionHouseConfig;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<AuctionHouseConfig>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<AuctionHouseConfig>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class Auctions {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    cur_auction_id: U64;
    all_active_auctions: Stdlib.Table.Table;
    listing_event: Stdlib.Event.EventHandle;
    bid_event: Stdlib.Event.EventHandle;
    cancel_bid_events: Stdlib.Event.EventHandle;
    constructor(proto: any, typeTag: TypeTag);
    static AuctionsParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Auctions;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<Auctions>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<Auctions>;
    static makeTag($p: TypeTag[]): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class BidEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    market_address: HexString;
    bid_id: Auction_bid_utils.BidId;
    offer_price: U64;
    expiration_sec: U64;
    constructor(proto: any, typeTag: TypeTag);
    static BidEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): BidEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class CancelBidEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    market_address: HexString;
    bid_id: Auction_bid_utils.BidId;
    constructor(proto: any, typeTag: TypeTag);
    static CancelBidEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): CancelBidEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare function bid_(bidder: HexString, creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, token_amount: U64, offer_price: U64, auction_id: U64, withdraw_expiration_sec: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_bid(creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, token_amount: U64, offer_price: U64, auction_id: U64, withdraw_expiration_sec: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function cancel_bid_in_auction_(bidder: HexString, auction_id: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_cancel_bid_in_auction(auction_id: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function complete_auction_(account: HexString, auction_id: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_complete_auction(auction_id: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function complete_auction_friend_(auction_id: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function create_auction_(owner: HexString, creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, amount: U64, min_price: U64, start_sec: U64, expiration_sec: U64, withdraw_expiration_sec: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_create_auction(creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, amount: U64, min_price: U64, start_sec: U64, expiration_sec: U64, withdraw_expiration_sec: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function create_auction_with_token_id_(owner: HexString, token_id: Aptos_token.Token.TokenId, amount: U64, min_price: U64, start_sec: U64, listing_expiration_sec: U64, withdraw_expiration_sec: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<U64>;
export declare function create_bid_with_token_id_(bidder: HexString, token_id: Aptos_token.Token.TokenId, token_amount: U64, offer_price: U64, auction_id: U64, withdraw_expiration_sec: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<Auction_bid_utils.BidId>;
export declare function find_highest_bid_(auction: Auction, $c: AptosDataCache, $p: TypeTag[]): Promise<Auction_bid_utils.BidId>;
export declare function generate_auction_data_(owner: HexString, token_id: Aptos_token.Token.TokenId, amount: U64, min_price: U64, start_sec: U64, expiration_sec: U64, withdraw_expiration_sec: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<Auction>;
export declare function get_auction_listing_id_(auction_id: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<Stdlib.Guid.ID>;
export declare function increase_bid_(bidder: HexString, price_delta: U64, auction_id: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_increase_bid(price_delta: U64, auction_id: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function increase_bid_price_(bidder: HexString, bid_id: Auction_bid_utils.BidId, price_delta: U64, auction_id: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function initialize_auction_(account: HexString, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_initialize_auction($p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function initialize_auction_house_(account: HexString, market_fee_numerator: U64, market_fee_denominator: U64, fee_address: HexString, $c: AptosDataCache): Promise<void>;
export declare function buildPayload_initialize_auction_house(market_fee_numerator: U64, market_fee_denominator: U64, fee_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function remove_auction_(account: HexString, auction_id: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<Auction>;
export declare function remove_auction_friend_(auction_id: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<Auction>;
export declare function withdraw_coin_from_bid_(bidder: HexString, lister_addr: HexString, listing_creation_number: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_withdraw_coin_from_bid(lister_addr: HexString, listing_creation_number: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function loadParsers(repo: AptosParserRepo): void;
export declare class App {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
    constructor(client: AptosClient, repo: AptosParserRepo, cache: AptosLocalCache);
    get moduleAddress(): HexString;
    get moduleName(): string;
    get Auction(): typeof Auction;
    get AuctionHouseConfig(): typeof AuctionHouseConfig;
    loadAuctionHouseConfig(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<AuctionHouseConfig>;
    get Auctions(): typeof Auctions;
    loadAuctions(owner: HexString, $p: TypeTag[], /* <CoinType> */ loadFull?: boolean, fillCache?: boolean): Promise<Auctions>;
    get BidEvent(): typeof BidEvent;
    get CancelBidEvent(): typeof CancelBidEvent;
    payload_bid(creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, token_amount: U64, offer_price: U64, auction_id: U64, withdraw_expiration_sec: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    bid(_account: AptosAccount, creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, token_amount: U64, offer_price: U64, auction_id: U64, withdraw_expiration_sec: U64, $p: TypeTag[], /* <CoinType>*/ option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_cancel_bid_in_auction(auction_id: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    cancel_bid_in_auction(_account: AptosAccount, auction_id: U64, $p: TypeTag[], /* <CoinType>*/ option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_complete_auction(auction_id: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    complete_auction(_account: AptosAccount, auction_id: U64, $p: TypeTag[], /* <CoinType>*/ option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_create_auction(creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, amount: U64, min_price: U64, start_sec: U64, expiration_sec: U64, withdraw_expiration_sec: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    create_auction(_account: AptosAccount, creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, amount: U64, min_price: U64, start_sec: U64, expiration_sec: U64, withdraw_expiration_sec: U64, $p: TypeTag[], /* <CoinType>*/ option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_increase_bid(price_delta: U64, auction_id: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    increase_bid(_account: AptosAccount, price_delta: U64, auction_id: U64, $p: TypeTag[], /* <CoinType>*/ option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_initialize_auction($p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    initialize_auction(_account: AptosAccount, $p: TypeTag[], /* <CoinType>*/ option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_initialize_auction_house(market_fee_numerator: U64, market_fee_denominator: U64, fee_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    initialize_auction_house(_account: AptosAccount, market_fee_numerator: U64, market_fee_denominator: U64, fee_address: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_withdraw_coin_from_bid(lister_addr: HexString, listing_creation_number: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    withdraw_coin_from_bid(_account: AptosAccount, lister_addr: HexString, listing_creation_number: U64, $p: TypeTag[], /* <CoinType>*/ option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
}
//# sourceMappingURL=auction.d.ts.map