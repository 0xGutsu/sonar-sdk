import * as $ from "@manahippo/move-to-ts";
import { AptosDataCache, AptosParserRepo, AptosLocalCache } from "@manahippo/move-to-ts";
import { U8, U64 } from "@manahippo/move-to-ts";
import { TypeParamDeclType, FieldDeclType } from "@manahippo/move-to-ts";
import { StructTag, TypeTag } from "@manahippo/move-to-ts";
import { OptionTransaction } from "@manahippo/move-to-ts";
import { HexString, AptosClient, AptosAccount, TxnBuilderTypes, Types } from "aptos";
import * as Aptos_token from "../aptos_token";
import * as Stdlib from "../stdlib";
export declare const packageName = "Sonar";
export declare const moduleAddress: HexString;
export declare const moduleName = "auction_listing_utils";
export declare const ELISTING_NOT_EXIST: U64;
export declare const ELISTING_ZERO_TOKEN: U64;
export declare const EOWNER_NOT_HAVING_ENOUGH_TOKEN: U64;
export declare const ESTART_TIME_LARGER_THAN_EXPIRE_TIME: U64;
export declare const EWITHDRAW_EXPIRE_TIME_SHORT_THAN_LISTING_TIME: U64;
export declare class CancelListingEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    id: Stdlib.Guid.ID;
    market_address: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static CancelListingEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): CancelListingEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class Listing {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    id: Stdlib.Guid.ID;
    token_id: Aptos_token.Token.TokenId;
    amount: U64;
    min_price: U64;
    instant_sale: boolean;
    start_sec: U64;
    expiration_sec: U64;
    withdraw_cap: Aptos_token.Token.WithdrawCapability;
    config: Aptos_token.Property_map.PropertyMap;
    constructor(proto: any, typeTag: TypeTag);
    static ListingParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Listing;
    static makeTag($p: TypeTag[]): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class ListingEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    id: Stdlib.Guid.ID;
    token_id: Aptos_token.Token.TokenId;
    amount: U64;
    min_price: U64;
    instant_sale: boolean;
    start_sec: U64;
    expiration_sec: U64;
    withdraw_sec: U64;
    market_address: HexString;
    config: Aptos_token.Property_map.PropertyMap;
    constructor(proto: any, typeTag: TypeTag);
    static ListingEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ListingEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class ListingRecords {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    records: Stdlib.Table.Table;
    listing_event: Stdlib.Event.EventHandle;
    cancel_listing_event: Stdlib.Event.EventHandle;
    constructor(proto: any, typeTag: TypeTag);
    static ListingRecordsParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ListingRecords;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<ListingRecords>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<ListingRecords>;
    static makeTag($p: TypeTag[]): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare function cancel_direct_listing_(owner: HexString, listing_id_creation_number: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_cancel_direct_listing(listing_id_creation_number: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function create_list_under_user_account_(owner: HexString, token_id: Aptos_token.Token.TokenId, amount: U64, min_price: U64, instant_sale: boolean, start_sec: U64, expiration_sec: U64, withdraw_expiration_sec: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<Stdlib.Guid.ID>;
export declare function create_listing_(owner: HexString, token_id: Aptos_token.Token.TokenId, amount: U64, min_price: U64, instant_sale: boolean, start_sec: U64, listing_expiration_sec: U64, withdraw_expiration_sec: U64, keys: Stdlib.String.String[], values: U8[][], types: Stdlib.String.String[], $c: AptosDataCache, $p: TypeTag[]): Promise<Listing>;
export declare function create_listing_event_(id: Stdlib.Guid.ID, token_id: Aptos_token.Token.TokenId, amount: U64, min_price: U64, instant_sale: boolean, start_sec: U64, expiration_sec: U64, withdraw_sec: U64, market_address: HexString, config: Aptos_token.Property_map.PropertyMap, $c: AptosDataCache): Promise<ListingEvent>;
export declare function create_listing_id_(owner: HexString, $c: AptosDataCache): Promise<Stdlib.Guid.ID>;
export declare function create_listing_id_raw_(lister: HexString, listing_creation_number: U64, $c: AptosDataCache): Promise<Stdlib.Guid.ID>;
export declare function destroy_listing_(entry: Listing, $c: AptosDataCache, $p: TypeTag[]): Promise<[Stdlib.Guid.ID, Aptos_token.Token.TokenId, U64, U64, boolean, U64, U64, Aptos_token.Token.WithdrawCapability, Aptos_token.Property_map.PropertyMap]>;
export declare function direct_listing_(owner: HexString, creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, amount: U64, min_price: U64, instant_sale: boolean, start_sec: U64, expiration_sec: U64, withdraw_expiration_sec: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_direct_listing(creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, amount: U64, min_price: U64, instant_sale: boolean, start_sec: U64, expiration_sec: U64, withdraw_expiration_sec: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function get_listing_creator_(list: Listing, $c: AptosDataCache, $p: TypeTag[]): Promise<HexString>;
export declare function get_listing_expiration_(list: Listing, $c: AptosDataCache, $p: TypeTag[]): Promise<U64>;
export declare function get_listing_id_(list: Listing, $c: AptosDataCache, $p: TypeTag[]): Promise<Stdlib.Guid.ID>;
export declare function get_listing_id_tuple_(list: Listing, $c: AptosDataCache, $p: TypeTag[]): Promise<[U64, HexString]>;
export declare function get_listing_info_(lister_address: HexString, listing_creation_number: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<[Aptos_token.Token.TokenId, U64, U64, boolean, U64, U64]>;
export declare function get_listing_instant_sale_(list: Listing, $c: AptosDataCache, $p: TypeTag[]): Promise<boolean>;
export declare function get_listing_min_price_(list: Listing, $c: AptosDataCache, $p: TypeTag[]): Promise<U64>;
export declare function get_listing_start_(list: Listing, $c: AptosDataCache, $p: TypeTag[]): Promise<U64>;
export declare function get_listing_token_amount_(list: Listing, $c: AptosDataCache, $p: TypeTag[]): Promise<U64>;
export declare function get_listing_token_id_(list: Listing, $c: AptosDataCache, $p: TypeTag[]): Promise<Aptos_token.Token.TokenId>;
export declare function initialize_listing_records_(owner: HexString, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function remove_listing_(lister_address: HexString, listing_creation_number: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<Listing>;
export declare function loadParsers(repo: AptosParserRepo): void;
export declare class App {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
    constructor(client: AptosClient, repo: AptosParserRepo, cache: AptosLocalCache);
    get moduleAddress(): HexString;
    get moduleName(): string;
    get CancelListingEvent(): typeof CancelListingEvent;
    get Listing(): typeof Listing;
    get ListingEvent(): typeof ListingEvent;
    get ListingRecords(): typeof ListingRecords;
    loadListingRecords(owner: HexString, $p: TypeTag[], /* <CoinType> */ loadFull?: boolean, fillCache?: boolean): Promise<ListingRecords>;
    payload_cancel_direct_listing(listing_id_creation_number: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    cancel_direct_listing(_account: AptosAccount, listing_id_creation_number: U64, $p: TypeTag[], /* <CoinType>*/ option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_direct_listing(creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, amount: U64, min_price: U64, instant_sale: boolean, start_sec: U64, expiration_sec: U64, withdraw_expiration_sec: U64, $p: TypeTag[], /* <CoinType>*/ isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    direct_listing(_account: AptosAccount, creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, property_version: U64, amount: U64, min_price: U64, instant_sale: boolean, start_sec: U64, expiration_sec: U64, withdraw_expiration_sec: U64, $p: TypeTag[], /* <CoinType>*/ option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
}
//# sourceMappingURL=auction_listing_utils.d.ts.map