import * as $ from "@manahippo/move-to-ts";
import { AptosDataCache, AptosParserRepo, AptosLocalCache } from "@manahippo/move-to-ts";
import { U8, U64, U128 } from "@manahippo/move-to-ts";
import { TypeParamDeclType, FieldDeclType } from "@manahippo/move-to-ts";
import { StructTag, TypeTag } from "@manahippo/move-to-ts";
import { OptionTransaction } from "@manahippo/move-to-ts";
import { HexString, AptosClient, AptosAccount, TxnBuilderTypes, Types } from "aptos";
import * as Aptos_token from "../aptos_token";
import * as Nexus from "../nexus";
import * as Stdlib from "../stdlib";
import * as Sonar_open_table from "./sonar_open_table";
export declare const packageName = "Sonar";
export declare const moduleAddress: HexString;
export declare const moduleName = "custodian";
export declare const ASK: boolean;
export declare const BID: boolean;
export declare const BUY: boolean;
export declare const E_CUSTODIAN_DOESNT_EXIST: U64;
export declare const E_CUSTODIAN_EXISTS: U64;
export declare const E_ERROR_CODE: U64;
export declare const E_INSUFFICIENT_BASE_TOKENS: U64;
export declare const E_INSUFFICIENT_COLLATERAL: U64;
export declare const E_INSUFFICIENT_QUOTE_TOKENS: U64;
export declare const E_INVALID_AMOUNT: U64;
export declare const E_INVALID_BASE_TYPE: U64;
export declare const E_INVALID_COLLATERAL: U64;
export declare const E_INVALID_EXPIRY: U64;
export declare const E_INVALID_QUOTE_TYPE: U64;
export declare const E_MARKET_DOESNT_EXIST: U64;
export declare const E_MARKET_MAP_DOESNT_EXIST: U64;
export declare const E_NOT_SONAR: U64;
export declare const E_NO_BID_DATA: U64;
export declare const E_NO_BID_HISTORY: U64;
export declare const E_NO_COLLATERAL_FOR_MARKET: U64;
export declare const E_NO_NFT_STORE: U64;
export declare const E_NO_NFT_STORES: U64;
export declare const E_NO_ORDER_ID: U64;
export declare const E_NO_TOKENS: U64;
export declare const E_NUM_TOKEN_IDS_AND_AMOUNTS_NOT_EQUAL: U64;
export declare const E_NUM_TOKEN_IDS_AND_NAMES_NOT_EQUAL: U64;
export declare const E_ORDER_DOESNT_EXIST: U64;
export declare const E_ORDER_SIDE_NOT_ASK: U64;
export declare const E_TOKEN_NOT_IN_COLLECTION: U64;
export declare const GENERAL_CUSTODIAN_ID: U64;
export declare const GENERIC_ASSET_TRANSFER_CUSTODIAN_ID: U64;
export declare const HI_64: U64;
export declare const LEFT: boolean;
export declare const LOT_SIZE: U64;
export declare const MARKET_ID: U64;
export declare const MAX_BID_DEFAULT: U128;
export declare const MIN_ASK_DEFAULT: U128;
export declare const NO_CUSTODIAN: U64;
export declare const PURE_COIN_PAIR: U64;
export declare const RIGHT: boolean;
export declare const SELL: boolean;
export declare const TICK_SIZE: U64;
export declare const USER_START_BASE: U64;
export declare const USER_START_QUOTE: U64;
export declare class BidData {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    user: HexString;
    timestamp: U64;
    price: U64;
    expires_at: U64;
    constructor(proto: any, typeTag: TypeTag);
    static BidDataParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): BidData;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class Collateral {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    token_map: Sonar_open_table.OpenTable;
    constructor(proto: any, typeTag: TypeTag);
    static CollateralParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Collateral;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<Collateral>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<Collateral>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class Collection {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    creator: HexString;
    collection: Stdlib.String.String;
    constructor(proto: any, typeTag: TypeTag);
    static CollectionParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Collection;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class CustodianCap {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    custodian_capability: Nexus.Registry.CustodianCapability;
    signer_capability: Stdlib.Account.SignerCapability;
    constructor(proto: any, typeTag: TypeTag);
    static CustodianCapParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): CustodianCap;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<CustodianCap>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<CustodianCap>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class MarketMap {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    market_map: Sonar_open_table.OpenTable;
    market_account_ids: Sonar_open_table.OpenTable;
    market_collections: Sonar_open_table.OpenTable;
    constructor(proto: any, typeTag: TypeTag);
    static MarketMapParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): MarketMap;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<MarketMap>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<MarketMap>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class MarketTypeInfo {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    base_type_info: Stdlib.Type_info.TypeInfo;
    quote_type_info: Stdlib.Type_info.TypeInfo;
    base_collection: Collection;
    quote_collection: Collection;
    constructor(proto: any, typeTag: TypeTag);
    static MarketTypeInfoParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): MarketTypeInfo;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class OrderInfo {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    user: HexString;
    token_id: Aptos_token.Token.TokenId;
    amount: U64;
    price: U64;
    side: boolean;
    auction_id: U64;
    constructor(proto: any, typeTag: TypeTag);
    static OrderInfoParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): OrderInfo;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class Orders {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    order_map: Sonar_open_table.OpenTable;
    constructor(proto: any, typeTag: TypeTag);
    static OrdersParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Orders;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class Token {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    constructor(proto: any, typeTag: TypeTag);
    static TokenParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Token;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class TokenMap {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    token_amounts: Sonar_open_table.OpenTable;
    base_tokens: Aptos_token.Token.TokenId[];
    quote_tokens: Aptos_token.Token.TokenId[];
    constructor(proto: any, typeTag: TypeTag);
    static TokenMapParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): TokenMap;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare function buy_specific_(user: HexString, market_id: U64, order_id: U128, order_user: HexString, order_token_id_creator: HexString, order_token_id_collection: Stdlib.String.String, order_token_id_name: Stdlib.String.String, order_token_id_property_version: U64, order_amount: U64, order_side: boolean, order_price: U64, order_auction_id: U64, amount: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_buy_specific(market_id: U64, order_id: U128, order_user: HexString, order_token_id_creator: HexString, order_token_id_collection: Stdlib.String.String, order_token_id_name: Stdlib.String.String, order_token_id_property_version: U64, order_amount: U64, order_side: boolean, order_price: U64, order_auction_id: U64, amount: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function cancel_all_limit_orders_(user: HexString, market_id: U64, side: boolean, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_cancel_all_limit_orders(market_id: U64, side: boolean, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function cancel_limit_order_(user: HexString, market_id: U64, order_id: U128, side: boolean, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_cancel_limit_order(market_id: U64, order_id: U128, side: boolean, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function create_collection_and_token_(creator: HexString, amount: U64, collection_max: U64, token_max: U64, royalty_bps: U64, collection_name: Stdlib.String.String, collection_desc: Stdlib.String.String, token_name: Stdlib.String.String, token_desc: Stdlib.String.String, uri: Stdlib.String.String, default_keys: Stdlib.String.String[], default_vals: U8[][], default_types: Stdlib.String.String[], $c: AptosDataCache): Promise<Aptos_token.Token.TokenId>;
export declare function create_collection_and_token_and_register_market_(user: HexString, amount: U64, collection_max: U64, token_max: U64, royalty_bps: U64, collection_name: Stdlib.String.String, collection_desc: Stdlib.String.String, token_name: Stdlib.String.String, token_desc: Stdlib.String.String, uri: Stdlib.String.String, default_keys: Stdlib.String.String[], default_vals: U8[][], default_types: Stdlib.String.String[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function decrement_tokens_(user: HexString, market_account_id: U128, tokens_to_remove_from_user: Aptos_token.Token.TokenId[], user_token_amounts: U64[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function decrement_tokens_from_senders_(token_senders: HexString[], market_account_id: U128, tokens_to_remove_from_target: Aptos_token.Token.TokenId[], target_token_amounts: U64[], is_base: boolean, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function deposit_base_collateral_tokens_(user: HexString, market_map_ref: MarketMap, market_id: U64, token_id: Aptos_token.Token.TokenId, token_name: Stdlib.String.String, amount: U64, property_version: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function deposit_base_collateral_tokens_in_bulk_(user: HexString, market_id: U64, token_ids: Aptos_token.Token.TokenId[], amounts: U64[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function deposit_base_collateral_tokens_in_bulk_method_(market_map_ref: MarketMap, user: HexString, market_id: U64, token_ids: Aptos_token.Token.TokenId[], amounts: U64[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function deposit_base_collateral_tokens_script_(user: HexString, market_id: U64, token_id: Aptos_token.Token.TokenId, token_name: Stdlib.String.String, amount: U64, property_version: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function deposit_base_collateral_tokens_script_real_(user: HexString, market_id: U64, amount: U64, creator: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_deposit_base_collateral_tokens_script_real(market_id: U64, amount: U64, creator: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function deposit_both_collateral_tokens_in_bulk_(user: HexString, market_id: U64, base_token_ids: Aptos_token.Token.TokenId[], base_amounts: U64[], quote_token_ids: Aptos_token.Token.TokenId[], quote_amounts: U64[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function deposit_quote_collateral_tokens_(user: HexString, market_map_ref: MarketMap, market_id: U64, token_id: Aptos_token.Token.TokenId, token_name: Stdlib.String.String, amount: U64, property_version: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function deposit_quote_collateral_tokens_in_bulk_(user: HexString, market_id: U64, token_ids: Aptos_token.Token.TokenId[], amounts: U64[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function deposit_quote_collateral_tokens_in_bulk_method_(market_map_ref: MarketMap, user: HexString, market_id: U64, token_ids: Aptos_token.Token.TokenId[], amounts: U64[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function deposit_quote_collateral_tokens_script_(user: HexString, market_id: U64, token_id: Aptos_token.Token.TokenId, token_name: Stdlib.String.String, amount: U64, property_version: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function deposit_quote_collateral_tokens_script_real_(user: HexString, market_id: U64, amount: U64, creator: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_deposit_quote_collateral_tokens_script_real(market_id: U64, amount: U64, creator: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function init_register_user_(user: HexString, market_id: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_init_register_user(market_id: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function place_limit_order_(user: HexString, market_id: U64, side: boolean, size: U64, price: U64, post_or_abort: boolean, fill_or_abort: boolean, immediate_or_cancel: boolean, is_auction: boolean, auction_min_price: U64, listing_expiration_sec: U64, withdraw_expiration_sec: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_place_limit_order(market_id: U64, side: boolean, size: U64, price: U64, post_or_abort: boolean, fill_or_abort: boolean, immediate_or_cancel: boolean, is_auction: boolean, auction_min_price: U64, listing_expiration_sec: U64, withdraw_expiration_sec: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function place_market_buy_(user: HexString, market_id: U64, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_place_market_buy(market_id: U64, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function place_market_order_(user: HexString, market_id: U64, direction: boolean, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function place_market_sell_(user: HexString, market_id: U64, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_place_market_sell(market_id: U64, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function register_custodian_(sonar: HexString, $c: AptosDataCache): Promise<void>;
export declare function buildPayload_register_custodian(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function register_market_pure_coin_(sonar: HexString, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function register_token_market_(sonar: HexString, base_collection: Collection, quote_collection: Collection, $c: AptosDataCache, $p: TypeTag[]): Promise<U64>;
export declare function register_token_market_by_name_(sonar: HexString, base_collection_creator: HexString, base_collection_name: U8[], quote_collection_creator: HexString, quote_collection_name: U8[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_register_token_market_by_name(base_collection_creator: HexString, base_collection_name: U8[], quote_collection_creator: HexString, quote_collection_name: U8[], $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function register_token_market_by_name_string_(sonar: HexString, base_collection_creator: HexString, base_collection_name: Stdlib.String.String, quote_collection_creator: HexString, quote_collection_name: Stdlib.String.String, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_register_token_market_by_name_string(base_collection_creator: HexString, base_collection_name: Stdlib.String.String, quote_collection_creator: HexString, quote_collection_name: Stdlib.String.String, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function register_user_(user: HexString, market_id: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_register_user(market_id: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function remove_orders_(market_map_ref: MarketMap, market_id: U64, order_ids: U128[], side: boolean, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function route_base_tokens_from_(market_map_ref: MarketMap, market_id: U64, user: HexString, base_amount: U64, _: U64, target_order_ids: U128[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function route_base_tokens_to_(market_map_ref: MarketMap, market_id: U64, user: HexString, amount_to_fill: U64, target_order_ids: U128[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function route_quote_tokens_from_(market_map_ref: MarketMap, market_id: U64, user: HexString, _: U64, quote_amount: U64, target_order_ids: U128[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function route_quote_tokens_to_(market_map_ref: MarketMap, market_id: U64, user: HexString, amount_to_fill: U64, target_order_ids: U128[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function send_tokens_to_targets_(market_account_id: U128, token_recipients: HexString[], token_amounts: U64[], tokens_to_send_to_target: Aptos_token.Token.TokenId[], is_base: boolean, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function send_tokens_to_user_(user: HexString, market_account_id: U128, token_amounts: U64[], tokens_to_send_to_user: Aptos_token.Token.TokenId[], is_base: boolean, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function swap_(user: HexString, market_id: U64, direction: boolean, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, token_ids: Aptos_token.Token.TokenId[], $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function swap_agnostic_(user: HexString, market_id: U64, direction: boolean, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function buildPayload_swap_agnostic(market_id: U64, direction: boolean, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function withdraw_base_collateral_tokens_(user: HexString, market_id: U64, token_id: Aptos_token.Token.TokenId, amount: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function withdraw_quote_collateral_tokens_(user: HexString, market_id: U64, token_id: Aptos_token.Token.TokenId, amount: U64, $c: AptosDataCache, $p: TypeTag[]): Promise<void>;
export declare function loadParsers(repo: AptosParserRepo): void;
export declare class App {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
    constructor(client: AptosClient, repo: AptosParserRepo, cache: AptosLocalCache);
    get moduleAddress(): HexString;
    get moduleName(): string;
    get BidData(): typeof BidData;
    get Collateral(): typeof Collateral;
    loadCollateral(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<Collateral>;
    get Collection(): typeof Collection;
    get CustodianCap(): typeof CustodianCap;
    loadCustodianCap(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<CustodianCap>;
    get MarketMap(): typeof MarketMap;
    loadMarketMap(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<MarketMap>;
    get MarketTypeInfo(): typeof MarketTypeInfo;
    get OrderInfo(): typeof OrderInfo;
    get Orders(): typeof Orders;
    get Token(): typeof Token;
    get TokenMap(): typeof TokenMap;
    payload_buy_specific(market_id: U64, order_id: U128, order_user: HexString, order_token_id_creator: HexString, order_token_id_collection: Stdlib.String.String, order_token_id_name: Stdlib.String.String, order_token_id_property_version: U64, order_amount: U64, order_side: boolean, order_price: U64, order_auction_id: U64, amount: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    buy_specific(_account: AptosAccount, market_id: U64, order_id: U128, order_user: HexString, order_token_id_creator: HexString, order_token_id_collection: Stdlib.String.String, order_token_id_name: Stdlib.String.String, order_token_id_property_version: U64, order_amount: U64, order_side: boolean, order_price: U64, order_auction_id: U64, amount: U64, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_cancel_all_limit_orders(market_id: U64, side: boolean, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    cancel_all_limit_orders(_account: AptosAccount, market_id: U64, side: boolean, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_cancel_limit_order(market_id: U64, order_id: U128, side: boolean, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    cancel_limit_order(_account: AptosAccount, market_id: U64, order_id: U128, side: boolean, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_deposit_base_collateral_tokens_script_real(market_id: U64, amount: U64, creator: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    deposit_base_collateral_tokens_script_real(_account: AptosAccount, market_id: U64, amount: U64, creator: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_deposit_quote_collateral_tokens_script_real(market_id: U64, amount: U64, creator: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    deposit_quote_collateral_tokens_script_real(_account: AptosAccount, market_id: U64, amount: U64, creator: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_init_register_user(market_id: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    init_register_user(_account: AptosAccount, market_id: U64, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_place_limit_order(market_id: U64, side: boolean, size: U64, price: U64, post_or_abort: boolean, fill_or_abort: boolean, immediate_or_cancel: boolean, is_auction: boolean, auction_min_price: U64, listing_expiration_sec: U64, withdraw_expiration_sec: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    place_limit_order(_account: AptosAccount, market_id: U64, side: boolean, size: U64, price: U64, post_or_abort: boolean, fill_or_abort: boolean, immediate_or_cancel: boolean, is_auction: boolean, auction_min_price: U64, listing_expiration_sec: U64, withdraw_expiration_sec: U64, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_place_market_buy(market_id: U64, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    place_market_buy(_account: AptosAccount, market_id: U64, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_place_market_sell(market_id: U64, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    place_market_sell(_account: AptosAccount, market_id: U64, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_register_custodian(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    register_custodian(_account: AptosAccount, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_register_token_market_by_name(base_collection_creator: HexString, base_collection_name: U8[], quote_collection_creator: HexString, quote_collection_name: U8[], $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    register_token_market_by_name(_account: AptosAccount, base_collection_creator: HexString, base_collection_name: U8[], quote_collection_creator: HexString, quote_collection_name: U8[], $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_register_token_market_by_name_string(base_collection_creator: HexString, base_collection_name: Stdlib.String.String, quote_collection_creator: HexString, quote_collection_name: Stdlib.String.String, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    register_token_market_by_name_string(_account: AptosAccount, base_collection_creator: HexString, base_collection_name: Stdlib.String.String, quote_collection_creator: HexString, quote_collection_name: Stdlib.String.String, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_register_user(market_id: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    register_user(_account: AptosAccount, market_id: U64, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_swap_agnostic(market_id: U64, direction: boolean, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $p: TypeTag[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    swap_agnostic(_account: AptosAccount, market_id: U64, direction: boolean, min_base: U64, max_base: U64, min_quote: U64, max_quote: U64, limit_price: U64, $p: TypeTag[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    app_deposit_base_collateral_tokens_in_bulk(user: HexString, market_id: U64, token_ids: Aptos_token.Token.TokenId[], amounts: U64[], $p: TypeTag[]): Promise<void>;
    app_deposit_both_collateral_tokens_in_bulk(user: HexString, market_id: U64, base_token_ids: Aptos_token.Token.TokenId[], base_amounts: U64[], quote_token_ids: Aptos_token.Token.TokenId[], quote_amounts: U64[], $p: TypeTag[]): Promise<void>;
    app_deposit_quote_collateral_tokens_in_bulk(user: HexString, market_id: U64, token_ids: Aptos_token.Token.TokenId[], amounts: U64[], $p: TypeTag[]): Promise<void>;
}
//# sourceMappingURL=custodian.d.ts.map