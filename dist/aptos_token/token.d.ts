import * as $ from "@manahippo/move-to-ts";
import { AptosDataCache, AptosParserRepo, AptosLocalCache } from "@manahippo/move-to-ts";
import { U8, U64 } from "@manahippo/move-to-ts";
import { TypeParamDeclType, FieldDeclType } from "@manahippo/move-to-ts";
import { StructTag, TypeTag } from "@manahippo/move-to-ts";
import { OptionTransaction } from "@manahippo/move-to-ts";
import { HexString, AptosClient, AptosAccount, TxnBuilderTypes, Types } from "aptos";
import * as Stdlib from "../stdlib";
import * as Property_map from "./property_map";
export declare const packageName = "AptosToken";
export declare const moduleAddress: HexString;
export declare const moduleName = "token";
export declare const BURNABLE_BY_CREATOR: U8[];
export declare const BURNABLE_BY_OWNER: U8[];
export declare const COLLECTION_DESCRIPTION_MUTABLE_IND: U64;
export declare const COLLECTION_MAX_MUTABLE_IND: U64;
export declare const COLLECTION_URI_MUTABLE_IND: U64;
export declare const EALREADY_HAS_BALANCE: U64;
export declare const ECANNOT_UPDATE_RESERVED_PROPERTY: U64;
export declare const ECOLLECTIONS_NOT_PUBLISHED: U64;
export declare const ECOLLECTION_ALREADY_EXISTS: U64;
export declare const ECOLLECTION_NAME_TOO_LONG: U64;
export declare const ECOLLECTION_NOT_PUBLISHED: U64;
export declare const ECREATE_WOULD_EXCEED_COLLECTION_MAXIMUM: U64;
export declare const ECREATOR_CANNOT_BURN_TOKEN: U64;
export declare const EFIELD_NOT_MUTABLE: U64;
export declare const EINSUFFICIENT_BALANCE: U64;
export declare const EINVALID_TOKEN_MERGE: U64;
export declare const EMINT_WOULD_EXCEED_TOKEN_MAXIMUM: U64;
export declare const ENFT_NAME_TOO_LONG: U64;
export declare const ENFT_NOT_SPLITABLE: U64;
export declare const ENO_BURN_CAPABILITY: U64;
export declare const ENO_BURN_TOKEN_WITH_ZERO_AMOUNT: U64;
export declare const ENO_DEPOSIT_TOKEN_WITH_ZERO_AMOUNT: U64;
export declare const ENO_MINT_CAPABILITY: U64;
export declare const ENO_MUTATE_CAPABILITY: U64;
export declare const ENO_TOKEN_IN_TOKEN_STORE: U64;
export declare const EOWNER_CANNOT_BURN_TOKEN: U64;
export declare const ETOKEN_DATA_ALREADY_EXISTS: U64;
export declare const ETOKEN_DATA_NOT_PUBLISHED: U64;
export declare const ETOKEN_SPLIT_AMOUNT_LARGER_THAN_TOKEN_AMOUNT: U64;
export declare const ETOKEN_STORE_NOT_PUBLISHED: U64;
export declare const EURI_TOO_LONG: U64;
export declare const EURI_TOO_SHORT: U64;
export declare const EUSER_NOT_OPT_IN_DIRECT_TRANSFER: U64;
export declare const EWITHDRAW_PROOF_EXPIRES: U64;
export declare const EWITHDRAW_ZERO: U64;
export declare const MAX_COLLECTION_NAME_LENGTH: U64;
export declare const MAX_NFT_NAME_LENGTH: U64;
export declare const MAX_URI_LENGTH: U64;
export declare const TOKEN_DESCRIPTION_MUTABLE_IND: U64;
export declare const TOKEN_MAX_MUTABLE_IND: U64;
export declare const TOKEN_PROPERTY_MUTABLE: U8[];
export declare const TOKEN_PROPERTY_MUTABLE_IND: U64;
export declare const TOKEN_PROPERTY_VALUE_MUTABLE_IND: U64;
export declare const TOKEN_ROYALTY_MUTABLE_IND: U64;
export declare const TOKEN_URI_MUTABLE_IND: U64;
export declare class BurnTokenEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    id: TokenId;
    amount: U64;
    constructor(proto: any, typeTag: TypeTag);
    static BurnTokenEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): BurnTokenEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class CollectionData {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    description: Stdlib.String.String;
    name: Stdlib.String.String;
    uri: Stdlib.String.String;
    supply: U64;
    maximum: U64;
    mutability_config: CollectionMutabilityConfig;
    constructor(proto: any, typeTag: TypeTag);
    static CollectionDataParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): CollectionData;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class CollectionMutabilityConfig {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    description: boolean;
    uri: boolean;
    maximum: boolean;
    constructor(proto: any, typeTag: TypeTag);
    static CollectionMutabilityConfigParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): CollectionMutabilityConfig;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class Collections {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    collection_data: Stdlib.Table.Table;
    token_data: Stdlib.Table.Table;
    create_collection_events: Stdlib.Event.EventHandle;
    create_token_data_events: Stdlib.Event.EventHandle;
    mint_token_events: Stdlib.Event.EventHandle;
    constructor(proto: any, typeTag: TypeTag);
    static CollectionsParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Collections;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<Collections>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<Collections>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class CreateCollectionEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    creator: HexString;
    collection_name: Stdlib.String.String;
    uri: Stdlib.String.String;
    description: Stdlib.String.String;
    maximum: U64;
    constructor(proto: any, typeTag: TypeTag);
    static CreateCollectionEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): CreateCollectionEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class CreateTokenDataEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    id: TokenDataId;
    description: Stdlib.String.String;
    maximum: U64;
    uri: Stdlib.String.String;
    royalty_payee_address: HexString;
    royalty_points_denominator: U64;
    royalty_points_numerator: U64;
    name: Stdlib.String.String;
    mutability_config: TokenMutabilityConfig;
    property_keys: Stdlib.String.String[];
    property_values: U8[][];
    property_types: Stdlib.String.String[];
    constructor(proto: any, typeTag: TypeTag);
    static CreateTokenDataEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): CreateTokenDataEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class DepositEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    id: TokenId;
    amount: U64;
    constructor(proto: any, typeTag: TypeTag);
    static DepositEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): DepositEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class MintTokenEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    id: TokenDataId;
    amount: U64;
    constructor(proto: any, typeTag: TypeTag);
    static MintTokenEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): MintTokenEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class MutateTokenPropertyMapEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    old_id: TokenId;
    new_id: TokenId;
    keys: Stdlib.String.String[];
    values: U8[][];
    types: Stdlib.String.String[];
    constructor(proto: any, typeTag: TypeTag);
    static MutateTokenPropertyMapEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): MutateTokenPropertyMapEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class Royalty {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    royalty_points_numerator: U64;
    royalty_points_denominator: U64;
    payee_address: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static RoyaltyParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Royalty;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class Token {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    id: TokenId;
    amount: U64;
    token_properties: Property_map.PropertyMap;
    constructor(proto: any, typeTag: TypeTag);
    static TokenParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Token;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class TokenData {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    maximum: U64;
    largest_property_version: U64;
    supply: U64;
    uri: Stdlib.String.String;
    royalty: Royalty;
    name: Stdlib.String.String;
    description: Stdlib.String.String;
    default_properties: Property_map.PropertyMap;
    mutability_config: TokenMutabilityConfig;
    constructor(proto: any, typeTag: TypeTag);
    static TokenDataParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): TokenData;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class TokenDataId {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    creator: HexString;
    collection: Stdlib.String.String;
    name: Stdlib.String.String;
    constructor(proto: any, typeTag: TypeTag);
    static TokenDataIdParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): TokenDataId;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class TokenId {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    token_data_id: TokenDataId;
    property_version: U64;
    constructor(proto: any, typeTag: TypeTag);
    static TokenIdParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): TokenId;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class TokenMutabilityConfig {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    maximum: boolean;
    uri: boolean;
    royalty: boolean;
    description: boolean;
    properties: boolean;
    constructor(proto: any, typeTag: TypeTag);
    static TokenMutabilityConfigParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): TokenMutabilityConfig;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class TokenStore {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    tokens: Stdlib.Table.Table;
    direct_transfer: boolean;
    deposit_events: Stdlib.Event.EventHandle;
    withdraw_events: Stdlib.Event.EventHandle;
    burn_events: Stdlib.Event.EventHandle;
    mutate_token_property_events: Stdlib.Event.EventHandle;
    constructor(proto: any, typeTag: TypeTag);
    static TokenStoreParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): TokenStore;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<TokenStore>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<TokenStore>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class WithdrawCapability {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    token_owner: HexString;
    token_id: TokenId;
    amount: U64;
    expiration_sec: U64;
    constructor(proto: any, typeTag: TypeTag);
    static WithdrawCapabilityParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): WithdrawCapability;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class WithdrawEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    id: TokenId;
    amount: U64;
    constructor(proto: any, typeTag: TypeTag);
    static WithdrawEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): WithdrawEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare function balance_of_(owner: HexString, id: TokenId, $c: AptosDataCache): Promise<U64>;
export declare function burn_(owner: HexString, creators_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, $c: AptosDataCache): Promise<void>;
export declare function buildPayload_burn(creators_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function burn_by_creator_(creator: HexString, owner: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, $c: AptosDataCache): Promise<void>;
export declare function buildPayload_burn_by_creator(owner: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function check_collection_exists_(creator: HexString, name: Stdlib.String.String, $c: AptosDataCache): Promise<boolean>;
export declare function check_tokendata_exists_(creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, $c: AptosDataCache): Promise<boolean>;
export declare function create_collection_(creator: HexString, name: Stdlib.String.String, description: Stdlib.String.String, uri: Stdlib.String.String, maximum: U64, mutate_setting: boolean[], $c: AptosDataCache): Promise<void>;
export declare function create_collection_mutability_config_(mutate_setting: boolean[], $c: AptosDataCache): Promise<CollectionMutabilityConfig>;
export declare function create_collection_script_(creator: HexString, name: Stdlib.String.String, description: Stdlib.String.String, uri: Stdlib.String.String, maximum: U64, mutate_setting: boolean[], $c: AptosDataCache): Promise<void>;
export declare function buildPayload_create_collection_script(name: Stdlib.String.String, description: Stdlib.String.String, uri: Stdlib.String.String, maximum: U64, mutate_setting: boolean[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function create_token_data_id_(creator: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, $c: AptosDataCache): Promise<TokenDataId>;
export declare function create_token_id_(token_data_id: TokenDataId, property_version: U64, $c: AptosDataCache): Promise<TokenId>;
export declare function create_token_id_raw_(creator: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, $c: AptosDataCache): Promise<TokenId>;
export declare function create_token_mutability_config_(mutate_setting: boolean[], $c: AptosDataCache): Promise<TokenMutabilityConfig>;
export declare function create_token_script_(account: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, description: Stdlib.String.String, balance: U64, maximum: U64, uri: Stdlib.String.String, royalty_payee_address: HexString, royalty_points_denominator: U64, royalty_points_numerator: U64, mutate_setting: boolean[], property_keys: Stdlib.String.String[], property_values: U8[][], property_types: Stdlib.String.String[], $c: AptosDataCache): Promise<void>;
export declare function create_tokendata_(account: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, description: Stdlib.String.String, maximum: U64, uri: Stdlib.String.String, royalty_payee_address: HexString, royalty_points_denominator: U64, royalty_points_numerator: U64, token_mutate_config: TokenMutabilityConfig, property_keys: Stdlib.String.String[], property_values: U8[][], property_types: Stdlib.String.String[], $c: AptosDataCache): Promise<TokenDataId>;
export declare function create_withdraw_capability_(owner: HexString, token_id: TokenId, amount: U64, expiration_sec: U64, $c: AptosDataCache): Promise<WithdrawCapability>;
export declare function deposit_token_(account: HexString, token: Token, $c: AptosDataCache): Promise<void>;
export declare function direct_deposit_(account_addr: HexString, token: Token, $c: AptosDataCache): Promise<void>;
export declare function direct_deposit_with_opt_in_(account_addr: HexString, token: Token, $c: AptosDataCache): Promise<void>;
export declare function direct_transfer_(sender: HexString, receiver: HexString, token_id: TokenId, amount: U64, $c: AptosDataCache): Promise<void>;
export declare function direct_transfer_script_(sender: HexString, receiver: HexString, creators_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, $c: AptosDataCache): Promise<void>;
export declare function buildPayload_direct_transfer_script(creators_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function get_collection_supply_(creator_address: HexString, collection_name: Stdlib.String.String, $c: AptosDataCache): Promise<Stdlib.Option.Option>;
export declare function get_property_map_(owner: HexString, token_id: TokenId, $c: AptosDataCache): Promise<Property_map.PropertyMap>;
export declare function get_royalty_(token_id: TokenId, $c: AptosDataCache): Promise<Royalty>;
export declare function get_royalty_denominator_(royalty: Royalty, $c: AptosDataCache): Promise<U64>;
export declare function get_royalty_numerator_(royalty: Royalty, $c: AptosDataCache): Promise<U64>;
export declare function get_royalty_payee_(royalty: Royalty, $c: AptosDataCache): Promise<HexString>;
export declare function get_token_amount_(token: Token, $c: AptosDataCache): Promise<U64>;
export declare function get_token_data_id_fields_(token_data_id: TokenDataId, $c: AptosDataCache): Promise<[HexString, Stdlib.String.String, Stdlib.String.String]>;
export declare function get_token_id_(token: Token, $c: AptosDataCache): Promise<TokenId>;
export declare function get_token_id_fields_(token_id: TokenId, $c: AptosDataCache): Promise<[HexString, Stdlib.String.String, Stdlib.String.String, U64]>;
export declare function get_token_supply_(creator_address: HexString, token_data_id: TokenDataId, $c: AptosDataCache): Promise<Stdlib.Option.Option>;
export declare function get_tokendata_largest_property_version_(creator_address: HexString, token_data_id: TokenDataId, $c: AptosDataCache): Promise<U64>;
export declare function get_tokendata_uri_(creator: HexString, token_data_id: TokenDataId, $c: AptosDataCache): Promise<Stdlib.String.String>;
export declare function has_token_store_(owner: HexString, $c: AptosDataCache): Promise<boolean>;
export declare function initialize_token_(_account: HexString, _token_id: TokenId, $c: AptosDataCache): Promise<void>;
export declare function initialize_token_script_(_account: HexString, $c: AptosDataCache): Promise<void>;
export declare function buildPayload_initialize_token_script(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function initialize_token_store_(account: HexString, $c: AptosDataCache): Promise<void>;
export declare function merge_(dst_token: Token, source_token: Token, $c: AptosDataCache): Promise<void>;
export declare function mint_script_(account: HexString, token_data_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, amount: U64, $c: AptosDataCache): Promise<void>;
export declare function buildPayload_mint_script(token_data_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function mint_token_(account: HexString, token_data_id: TokenDataId, amount: U64, $c: AptosDataCache): Promise<TokenId>;
export declare function mint_token_to_(account: HexString, receiver: HexString, token_data_id: TokenDataId, amount: U64, $c: AptosDataCache): Promise<void>;
export declare function mutate_one_token_(account: HexString, token_owner: HexString, token_id: TokenId, keys: Stdlib.String.String[], values: U8[][], types: Stdlib.String.String[], $c: AptosDataCache): Promise<TokenId>;
export declare function mutate_token_properties_(account: HexString, token_owner: HexString, creator: HexString, collection_name: Stdlib.String.String, token_name: Stdlib.String.String, token_property_version: U64, amount: U64, keys: Stdlib.String.String[], values: U8[][], types: Stdlib.String.String[], $c: AptosDataCache): Promise<void>;
export declare function mutate_tokendata_property_(creator: HexString, token_data_id: TokenDataId, keys: Stdlib.String.String[], values: U8[][], types: Stdlib.String.String[], $c: AptosDataCache): Promise<void>;
export declare function mutate_tokendata_uri_(creator: HexString, token_data_id: TokenDataId, uri: Stdlib.String.String, $c: AptosDataCache): Promise<void>;
export declare function opt_in_direct_transfer_(account: HexString, opt_in: boolean, $c: AptosDataCache): Promise<void>;
export declare function buildPayload_opt_in_direct_transfer(opt_in: boolean, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function split_(dst_token: Token, amount: U64, $c: AptosDataCache): Promise<Token>;
export declare function token_id_(token: Token, $c: AptosDataCache): Promise<TokenId>;
export declare function transfer_(from: HexString, id: TokenId, to: HexString, amount: U64, $c: AptosDataCache): Promise<void>;
export declare function update_token_property_internal_(token_owner: HexString, token_id: TokenId, keys: Stdlib.String.String[], values: U8[][], types: Stdlib.String.String[], $c: AptosDataCache): Promise<void>;
export declare function withdraw_token_(account: HexString, id: TokenId, amount: U64, $c: AptosDataCache): Promise<Token>;
export declare function withdraw_with_capability_(withdraw_proof: WithdrawCapability, $c: AptosDataCache): Promise<Token>;
export declare function withdraw_with_event_internal_(account_addr: HexString, id: TokenId, amount: U64, $c: AptosDataCache): Promise<Token>;
export declare function loadParsers(repo: AptosParserRepo): void;
export declare class App {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
    constructor(client: AptosClient, repo: AptosParserRepo, cache: AptosLocalCache);
    get moduleAddress(): HexString;
    get moduleName(): string;
    get BurnTokenEvent(): typeof BurnTokenEvent;
    get CollectionData(): typeof CollectionData;
    get CollectionMutabilityConfig(): typeof CollectionMutabilityConfig;
    get Collections(): typeof Collections;
    loadCollections(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<Collections>;
    get CreateCollectionEvent(): typeof CreateCollectionEvent;
    get CreateTokenDataEvent(): typeof CreateTokenDataEvent;
    get DepositEvent(): typeof DepositEvent;
    get MintTokenEvent(): typeof MintTokenEvent;
    get MutateTokenPropertyMapEvent(): typeof MutateTokenPropertyMapEvent;
    get Royalty(): typeof Royalty;
    get Token(): typeof Token;
    get TokenData(): typeof TokenData;
    get TokenDataId(): typeof TokenDataId;
    get TokenId(): typeof TokenId;
    get TokenMutabilityConfig(): typeof TokenMutabilityConfig;
    get TokenStore(): typeof TokenStore;
    loadTokenStore(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<TokenStore>;
    get WithdrawCapability(): typeof WithdrawCapability;
    get WithdrawEvent(): typeof WithdrawEvent;
    payload_burn(creators_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    burn(_account: AptosAccount, creators_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_burn_by_creator(owner: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    burn_by_creator(_account: AptosAccount, owner: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_create_collection_script(name: Stdlib.String.String, description: Stdlib.String.String, uri: Stdlib.String.String, maximum: U64, mutate_setting: boolean[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    create_collection_script(_account: AptosAccount, name: Stdlib.String.String, description: Stdlib.String.String, uri: Stdlib.String.String, maximum: U64, mutate_setting: boolean[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_direct_transfer_script(creators_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    direct_transfer_script(_account: AptosAccount, creators_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, property_version: U64, amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_initialize_token_script(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    initialize_token_script(_account: AptosAccount, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_mint_script(token_data_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    mint_script(_account: AptosAccount, token_data_address: HexString, collection: Stdlib.String.String, name: Stdlib.String.String, amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_opt_in_direct_transfer(opt_in: boolean, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    opt_in_direct_transfer(_account: AptosAccount, opt_in: boolean, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
}
//# sourceMappingURL=token.d.ts.map