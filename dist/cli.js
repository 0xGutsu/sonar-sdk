"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfig = void 0;
const move_to_ts_1 = require("@manahippo/move-to-ts");
const aptos_1 = require("aptos");
const commander_1 = require("commander");
const fs = __importStar(require("fs"));
const yaml = __importStar(require("yaml"));
const Nexus = __importStar(require("./nexus"));
const Sonar = __importStar(require("./sonar"));
const readConfig = (program) => {
    const { config, profile } = program.opts();
    const ymlContent = fs.readFileSync(config, { encoding: "utf-8" });
    const result = yaml.parse(ymlContent);
    //console.log(result);
    if (!result.profiles) {
        throw new Error("Expect a profiles to be present in yaml config");
    }
    if (!result.profiles[profile]) {
        throw new Error(`Expect a ${profile} profile to be present in yaml config`);
    }
    const url = result.profiles[profile].rest_url;
    const privateKeyStr = result.profiles[profile].private_key;
    if (!url) {
        throw new Error(`Expect rest_url to be present in ${profile} profile`);
    }
    if (!privateKeyStr) {
        throw new Error(`Expect private_key to be present in ${profile} profile`);
    }
    const privateKey = new aptos_1.HexString(privateKeyStr);
    const client = new aptos_1.AptosClient(result.profiles[profile].rest_url);
    const account = new aptos_1.AptosAccount(privateKey.toUint8Array());
    console.log(`Using address ${account.address().hex()}`);
    return { client, account };
};
exports.readConfig = readConfig;
const program = new commander_1.Command();
program
    .name('yarn cli')
    .description('Move TS CLI generated by move-to-ts')
    .requiredOption('-c, --config <path>', 'path to your aptos config.yml (generated with "aptos init")')
    .option('-p, --profile <PROFILE>', 'aptos config profile to use', 'default');
const assets_init_all_coin_types = (max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Assets.buildPayload_init_all_coin_types();
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("assets:init-all-coin-types")
    .description("")
    .argument('[max_gas]', '', '10000')
    .action(assets_init_all_coin_types);
const assets_init_coin_types = (max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Assets.buildPayload_init_coin_types();
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("assets:init-coin-types")
    .description("")
    .argument('[max_gas]', '', '10000')
    .action(assets_init_coin_types);
const assets_mint = (CoinType, amount, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const CoinType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(CoinType);
    const amount_ = (0, move_to_ts_1.u64)(amount);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Assets.buildPayload_mint(amount_, [CoinType_]);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("assets:mint")
    .description("")
    .argument('<TYPE_CoinType>')
    .argument('<amount>')
    .argument('[max_gas]', '', '10000')
    .action(assets_mint);
const assets_mint_and_deposit = (CoinType, amount, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const CoinType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(CoinType);
    const amount_ = (0, move_to_ts_1.u64)(amount);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Assets.buildPayload_mint_and_deposit(amount_, [CoinType_]);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("assets:mint-and-deposit")
    .description("")
    .argument('<TYPE_CoinType>')
    .argument('<amount>')
    .argument('[max_gas]', '', '10000')
    .action(assets_mint_and_deposit);
const auction_initialize_auction = (CoinType, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const CoinType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(CoinType);
    const max_gas_ = parseInt(max_gas);
    const payload = Sonar.Auction.buildPayload_initialize_auction([CoinType_]);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("auction:initialize-auction")
    .description("")
    .argument('<TYPE_CoinType>')
    .argument('[max_gas]', '', '10000')
    .action(auction_initialize_auction);
const auction_initialize_auction_house = (market_fee_numerator, market_fee_denominator, fee_address, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const market_fee_numerator_ = (0, move_to_ts_1.u64)(market_fee_numerator);
    const market_fee_denominator_ = (0, move_to_ts_1.u64)(market_fee_denominator);
    const fee_address_ = new aptos_1.HexString(fee_address);
    const max_gas_ = parseInt(max_gas);
    const payload = Sonar.Auction.buildPayload_initialize_auction_house(market_fee_numerator_, market_fee_denominator_, fee_address_);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("auction:initialize-auction-house")
    .description("")
    .argument('<market_fee_numerator>')
    .argument('<market_fee_denominator>')
    .argument('<fee_address>')
    .argument('[max_gas]', '', '10000')
    .action(auction_initialize_auction_house);
const custodian_register_custodian = (max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const max_gas_ = parseInt(max_gas);
    const payload = Sonar.Custodian.buildPayload_register_custodian();
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("custodian:register-custodian")
    .description("")
    .argument('[max_gas]', '', '10000')
    .action(custodian_register_custodian);
const market_cancel_all_limit_orders_user = (host, market_id, side, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const host_ = new aptos_1.HexString(host);
    const market_id_ = (0, move_to_ts_1.u64)(market_id);
    const side_ = side == 'true';
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Market.buildPayload_cancel_all_limit_orders_user(host_, market_id_, side_);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("market:cancel-all-limit-orders-user")
    .description("")
    .argument('<host>')
    .argument('<market_id>')
    .argument('<side>')
    .argument('[max_gas]', '', '10000')
    .action(market_cancel_all_limit_orders_user);
const market_cancel_limit_order_user = (host, market_id, side, order_id, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const host_ = new aptos_1.HexString(host);
    const market_id_ = (0, move_to_ts_1.u64)(market_id);
    const side_ = side == 'true';
    const order_id_ = (0, move_to_ts_1.u128)(order_id);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Market.buildPayload_cancel_limit_order_user(host_, market_id_, side_, order_id_);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("market:cancel-limit-order-user")
    .description("")
    .argument('<host>')
    .argument('<market_id>')
    .argument('<side>')
    .argument('<order_id>')
    .argument('[max_gas]', '', '10000')
    .action(market_cancel_limit_order_user);
const market_place_limit_order_user = (BaseType, QuoteType, host, market_id, side, size, price, post_or_abort, fill_or_abort, immediate_or_cancel, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const BaseType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(BaseType);
    const QuoteType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(QuoteType);
    const host_ = new aptos_1.HexString(host);
    const market_id_ = (0, move_to_ts_1.u64)(market_id);
    const side_ = side == 'true';
    const size_ = (0, move_to_ts_1.u64)(size);
    const price_ = (0, move_to_ts_1.u64)(price);
    const post_or_abort_ = post_or_abort == 'true';
    const fill_or_abort_ = fill_or_abort == 'true';
    const immediate_or_cancel_ = immediate_or_cancel == 'true';
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Market.buildPayload_place_limit_order_user(host_, market_id_, side_, size_, price_, post_or_abort_, fill_or_abort_, immediate_or_cancel_, [BaseType_, QuoteType_]);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("market:place-limit-order-user")
    .description("")
    .argument('<TYPE_BaseType>')
    .argument('<TYPE_QuoteType>')
    .argument('<host>')
    .argument('<market_id>')
    .argument('<side>')
    .argument('<size>')
    .argument('<price>')
    .argument('<post_or_abort>')
    .argument('<fill_or_abort>')
    .argument('<immediate_or_cancel>')
    .argument('[max_gas]', '', '10000')
    .action(market_place_limit_order_user);
const market_place_market_order_user = (BaseType, QuoteType, host, market_id, direction, min_base, max_base, min_quote, max_quote, limit_price, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const BaseType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(BaseType);
    const QuoteType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(QuoteType);
    const host_ = new aptos_1.HexString(host);
    const market_id_ = (0, move_to_ts_1.u64)(market_id);
    const direction_ = direction == 'true';
    const min_base_ = (0, move_to_ts_1.u64)(min_base);
    const max_base_ = (0, move_to_ts_1.u64)(max_base);
    const min_quote_ = (0, move_to_ts_1.u64)(min_quote);
    const max_quote_ = (0, move_to_ts_1.u64)(max_quote);
    const limit_price_ = (0, move_to_ts_1.u64)(limit_price);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Market.buildPayload_place_market_order_user(host_, market_id_, direction_, min_base_, max_base_, min_quote_, max_quote_, limit_price_, [BaseType_, QuoteType_]);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("market:place-market-order-user")
    .description("")
    .argument('<TYPE_BaseType>')
    .argument('<TYPE_QuoteType>')
    .argument('<host>')
    .argument('<market_id>')
    .argument('<direction>')
    .argument('<min_base>')
    .argument('<max_base>')
    .argument('<min_quote>')
    .argument('<max_quote>')
    .argument('<limit_price>')
    .argument('[max_gas]', '', '10000')
    .action(market_place_market_order_user);
const market_register_market_pure_coin = (BaseCoinType, QuoteCoinType, lot_size, tick_size, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const BaseCoinType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(BaseCoinType);
    const QuoteCoinType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(QuoteCoinType);
    const lot_size_ = (0, move_to_ts_1.u64)(lot_size);
    const tick_size_ = (0, move_to_ts_1.u64)(tick_size);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Market.buildPayload_register_market_pure_coin(lot_size_, tick_size_, [BaseCoinType_, QuoteCoinType_]);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("market:register-market-pure-coin")
    .description("")
    .argument('<TYPE_BaseCoinType>')
    .argument('<TYPE_QuoteCoinType>')
    .argument('<lot_size>')
    .argument('<tick_size>')
    .argument('[max_gas]', '', '10000')
    .action(market_register_market_pure_coin);
const market_swap_between_coinstores = (BaseCoinType, QuoteCoinType, host, market_id, direction, min_base, max_base, min_quote, max_quote, limit_price, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const BaseCoinType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(BaseCoinType);
    const QuoteCoinType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(QuoteCoinType);
    const host_ = new aptos_1.HexString(host);
    const market_id_ = (0, move_to_ts_1.u64)(market_id);
    const direction_ = direction == 'true';
    const min_base_ = (0, move_to_ts_1.u64)(min_base);
    const max_base_ = (0, move_to_ts_1.u64)(max_base);
    const min_quote_ = (0, move_to_ts_1.u64)(min_quote);
    const max_quote_ = (0, move_to_ts_1.u64)(max_quote);
    const limit_price_ = (0, move_to_ts_1.u64)(limit_price);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Market.buildPayload_swap_between_coinstores(host_, market_id_, direction_, min_base_, max_base_, min_quote_, max_quote_, limit_price_, [BaseCoinType_, QuoteCoinType_]);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("market:swap-between-coinstores")
    .description("")
    .argument('<TYPE_BaseCoinType>')
    .argument('<TYPE_QuoteCoinType>')
    .argument('<host>')
    .argument('<market_id>')
    .argument('<direction>')
    .argument('<min_base>')
    .argument('<max_base>')
    .argument('<min_quote>')
    .argument('<max_quote>')
    .argument('<limit_price>')
    .argument('[max_gas]', '', '10000')
    .action(market_swap_between_coinstores);
const registry_init_registry = (max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.Registry.buildPayload_init_registry();
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("registry:init-registry")
    .description("")
    .argument('[max_gas]', '', '10000')
    .action(registry_init_registry);
const user_deposit_from_coinstore = (CoinType, market_id, general_custodian_id, amount, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const CoinType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(CoinType);
    const market_id_ = (0, move_to_ts_1.u64)(market_id);
    const general_custodian_id_ = (0, move_to_ts_1.u64)(general_custodian_id);
    const amount_ = (0, move_to_ts_1.u64)(amount);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.User.buildPayload_deposit_from_coinstore(market_id_, general_custodian_id_, amount_, [CoinType_]);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("user:deposit-from-coinstore")
    .description("")
    .argument('<TYPE_CoinType>')
    .argument('<market_id>')
    .argument('<general_custodian_id>')
    .argument('<amount>')
    .argument('[max_gas]', '', '10000')
    .action(user_deposit_from_coinstore);
const user_register_market_account = (BaseType, QuoteType, market_id, general_custodian_id, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const BaseType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(BaseType);
    const QuoteType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(QuoteType);
    const market_id_ = (0, move_to_ts_1.u64)(market_id);
    const general_custodian_id_ = (0, move_to_ts_1.u64)(general_custodian_id);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.User.buildPayload_register_market_account(market_id_, general_custodian_id_, [BaseType_, QuoteType_]);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("user:register-market-account")
    .description("")
    .argument('<TYPE_BaseType>')
    .argument('<TYPE_QuoteType>')
    .argument('<market_id>')
    .argument('<general_custodian_id>')
    .argument('[max_gas]', '', '10000')
    .action(user_register_market_account);
const user_withdraw_to_coinstore = (CoinType, market_id, amount, max_gas) => __awaiter(void 0, void 0, void 0, function* () {
    const { client, account } = (0, exports.readConfig)(program);
    const CoinType_ = (0, move_to_ts_1.parseTypeTagOrThrow)(CoinType);
    const market_id_ = (0, move_to_ts_1.u64)(market_id);
    const amount_ = (0, move_to_ts_1.u64)(amount);
    const max_gas_ = parseInt(max_gas);
    const payload = Nexus.User.buildPayload_withdraw_to_coinstore(market_id_, amount_, [CoinType_]);
    yield (0, move_to_ts_1.sendPayloadTxAndLog)(client, account, payload, { maxGasAmount: max_gas_ });
});
program
    .command("user:withdraw-to-coinstore")
    .description("")
    .argument('<TYPE_CoinType>')
    .argument('<market_id>')
    .argument('<amount>')
    .argument('[max_gas]', '', '10000')
    .action(user_withdraw_to_coinstore);
program.parse();
//# sourceMappingURL=cli.js.map